From b3ea30f325a109699e4b840ea5433f2c6129b8dc Mon Sep 17 00:00:00 2001
From: "Juan A. Suarez Romero" <jasuarez@igalia.com>
Date: Fri, 23 Sep 2016 15:57:39 +0000
Subject: [PATCH 25/37] i965/vec4: consider subregister offset in live
 variables
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Take into account offset values less than a full register (32 bytes)
when getting the var from register.

This is required when dealing with an operation that writes half of the
register (like one d2x in IVB/BYT, which uses exec_size == 4).

v2:
- Take in account this offset < 32 in liveness analysis too (Curro)

v3:
- Change formula in var_from_reg() (Curro)
- Remove useless changes (Curro)

Signed-off-by: Samuel Iglesias GonsÃ¡lvez <siglesias@igalia.com>
---
 src/intel/compiler/brw_vec4_live_variables.h | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/intel/compiler/brw_vec4_live_variables.h b/src/intel/compiler/brw_vec4_live_variables.h
index 2946b98aacc..92f79550fd4 100644
--- a/src/intel/compiler/brw_vec4_live_variables.h
+++ b/src/intel/compiler/brw_vec4_live_variables.h
@@ -91,7 +91,7 @@ var_from_reg(const simple_allocator &alloc, const src_reg &reg,
    assert(reg.file == VGRF && reg.nr < alloc.count && c < 4);
    const unsigned csize = DIV_ROUND_UP(type_sz(reg.type), 4);
    unsigned result =
-      8 * (alloc.offsets[reg.nr] + reg.offset / REG_SIZE) +
+      8 * alloc.offsets[reg.nr] + reg.offset / 4 +
       (BRW_GET_SWZ(reg.swizzle, c) + k / csize * 4) * csize + k % csize;
    /* Do not exceed the limit for this register */
    assert(result < 8 * (alloc.offsets[reg.nr] + alloc.sizes[reg.nr]));
@@ -105,7 +105,7 @@ var_from_reg(const simple_allocator &alloc, const dst_reg &reg,
    assert(reg.file == VGRF && reg.nr < alloc.count && c < 4);
    const unsigned csize = DIV_ROUND_UP(type_sz(reg.type), 4);
    unsigned result =
-      8 * (alloc.offsets[reg.nr] + reg.offset / REG_SIZE) +
+      8 * alloc.offsets[reg.nr] + reg.offset / 4 +
       (c + k / csize * 4) * csize + k % csize;
    /* Do not exceed the limit for this register */
    assert(result < 8 * (alloc.offsets[reg.nr] + alloc.sizes[reg.nr]));
-- 
2.11.1

