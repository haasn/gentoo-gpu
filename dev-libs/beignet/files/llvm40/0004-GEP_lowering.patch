From beignet-bounces@lists.freedesktop.org Fri Mar 17 06:09:57 2017
Return-Path: <beignet-bounces@lists.freedesktop.org>
Received: from mail.snewbury.org.uk ([unix socket])
	 by mail.snewbury.org.uk (Cyrus 2.5.10) with LMTPA;
	 Fri, 17 Mar 2017 06:09:57 +0000
X-Sieve: CMU Sieve 2.4
X-Virus-Scanned: amavisd-new at snewbury.org.uk
Authentication-Results: mail.snewbury.org.uk (amavisd-new); dkim=neutral
	reason="invalid (public key: not available)" header.d=intel.com
Received: from gabe.freedesktop.org (gabe.freedesktop.org
 [131.252.210.177]) by mail.snewbury.org.uk (8.14.9/8.14.9) with ESMTP id
 v2H69sqk031470 (version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-GCM-SHA384
 bits=256 verify=NO) for <steve@snewbury.org.uk>; Fri, 17 Mar 2017 06:09:55
 GMT
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id B86AE6EC9E;
	Fri, 17 Mar 2017 06:14:28 +0000 (UTC)
X-Original-To: beignet@lists.freedesktop.org
Delivered-To: beignet@lists.freedesktop.org
Received: from mga09.intel.com (mga09.intel.com [134.134.136.24])
 by gabe.freedesktop.org (Postfix) with ESMTPS id 872556EC9E
 for <beignet@lists.freedesktop.org>; Fri, 17 Mar 2017 06:14:27 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple;
 d=intel.com; i=@intel.com; q=dns/txt; s=intel;
 t=1489731267; x=1521267267;
 h=from:to:cc:subject:date:message-id:in-reply-to: references;
 bh=VJ7HT+1LM56xg8oSy3lFWQnolxy8PKS1SjXNy6Tle5Y=;
 b=u6WwVmYtZR9KeQr6OzOQKrpo+syF6oAmJB/U1o9lEmbdIrJHp/ZtHLy7
 YMlh4JvoftIeuKTTghz9E3+B/lJ85w==;
Received: from orsmga004.jf.intel.com ([10.7.209.38])
 by orsmga102.jf.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 16 Mar 2017 23:14:27 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.36,175,1486454400"; d="scan'208";a="68271845"
Received: from pxl-ivb.sh.intel.com ([10.239.160.26])
 by orsmga004.jf.intel.com with ESMTP; 16 Mar 2017 23:14:26 -0700
From: Xiuli Pan <xiuli.pan@intel.com>
To: beignet@lists.freedesktop.org
Date: Fri, 17 Mar 2017 14:16:00 +0800
Message-Id: <1489731364-30284-4-git-send-email-xiuli.pan@intel.com>
X-Mailer: git-send-email 2.7.4
In-Reply-To: <1489731364-30284-1-git-send-email-xiuli.pan@intel.com>
References: <1489731364-30284-1-git-send-email-xiuli.pan@intel.com>
Cc: Pan Xiuli <xiuli.pan@intel.com>
Subject: [Beignet] [PATCH 4/7] Backend: Refine GEP lowering code
X-BeenThere: beignet@lists.freedesktop.org
X-Mailman-Version: 2.1.18
Precedence: list
List-Id: An open source open CL implemenation for Intel platform
 <beignet.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/beignet>,
 <mailto:beignet-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/beignet>
List-Post: <mailto:beignet@lists.freedesktop.org>
List-Help: <mailto:beignet-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/beignet>,
 <mailto:beignet-request@lists.freedesktop.org?subject=subscribe>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Errors-To: beignet-bounces@lists.freedesktop.org
Sender: "Beignet" <beignet-bounces@lists.freedesktop.org>
X-Evolution-Source: 1389266509.29991.2@artifact
Content-Transfer-Encoding: 8bit

From: Pan Xiuli <xiuli.pan@intel.com>

Pointer is not as like as array or vector, we should handle it in a
standalone path to fit furture change about PointerType inheritance.

Signed-off-by: Pan Xiuli <xiuli.pan@intel.com>
---
 backend/src/llvm/llvm_gen_backend.cpp |  6 +++---
 backend/src/llvm/llvm_gen_backend.hpp |  5 ++++-
 backend/src/llvm/llvm_passes.cpp      | 35 +++++++++++++++++++++++------------
 3 files changed, 30 insertions(+), 16 deletions(-)

diff --git a/backend/src/llvm/llvm_gen_backend.cpp b/backend/src/llvm/llvm_gen_backend.cpp
index 8c04664..742c947 100644
--- a/backend/src/llvm/llvm_gen_backend.cpp
+++ b/backend/src/llvm/llvm_gen_backend.cpp
@@ -1503,15 +1503,15 @@ namespace gbe
       Value *pointer = expr->getOperand(0);
       if (expr->getOpcode() == Instruction::GetElementPtr) {
         uint32_t constantOffset = 0;
-        CompositeType* CompTy = cast<CompositeType>(pointer->getType());
+        Type* EltTy = pointer->getType();
         for(uint32_t op=1; op<expr->getNumOperands(); ++op) {
             int32_t TypeIndex;
             ConstantInt* ConstOP = dyn_cast<ConstantInt>(expr->getOperand(op));
             GBE_ASSERTM(ConstOP != NULL, "must be constant index");
             TypeIndex = ConstOP->getZExtValue();
             GBE_ASSERT(TypeIndex >= 0);
-            constantOffset += getGEPConstOffset(unit, CompTy, TypeIndex);
-            CompTy = dyn_cast<CompositeType>(CompTy->getTypeAtIndex(TypeIndex));
+            constantOffset += getGEPConstOffset(unit, pointer->getType(), TypeIndex);
+            EltTy = getEltType(EltTy, TypeIndex);
         }
 
         ir::Constant cc = unit.getConstantSet().getConstant(pointer->getName());
diff --git a/backend/src/llvm/llvm_gen_backend.hpp b/backend/src/llvm/llvm_gen_backend.hpp
index 1ab77c9..eea050b 100644
--- a/backend/src/llvm/llvm_gen_backend.hpp
+++ b/backend/src/llvm/llvm_gen_backend.hpp
@@ -118,7 +118,10 @@ namespace gbe
   uint32_t getTypeByteSize(const ir::Unit &unit, llvm::Type* Ty);
 
   /*! Get GEP constant offset for the specified operand.*/
-  int32_t getGEPConstOffset(const ir::Unit &unit, llvm::CompositeType *CompTy, int32_t TypeIndex);
+  int32_t getGEPConstOffset(const ir::Unit &unit, llvm::Type *eltTy, int32_t TypeIndex);
+
+  /*! Get element type for a type.*/
+  llvm::Type* getEltType(llvm::Type *eltTy, uint32_t index = 0);
 
   /*! whether this is a kernel function */
   bool isKernelFunction(const llvm::Function &f);
diff --git a/backend/src/llvm/llvm_passes.cpp b/backend/src/llvm/llvm_passes.cpp
index c5f3ffe..8f5bcc9 100644
--- a/backend/src/llvm/llvm_passes.cpp
+++ b/backend/src/llvm/llvm_passes.cpp
@@ -180,12 +180,23 @@ namespace gbe
     return size_bit/8;
   }
 
-  int32_t getGEPConstOffset(const ir::Unit &unit, CompositeType *CompTy, int32_t TypeIndex) {
+  Type* getEltType(Type* eltTy, uint32_t index) {
+    Type *elementType = NULL;
+    if (PointerType* ptrType = dyn_cast<PointerType>(eltTy))
+      elementType = ptrType->getElementType();
+    else if(SequentialType * seqType = dyn_cast<SequentialType>(eltTy))
+      elementType = seqType->getElementType();
+    else if(CompositeType * compTy= dyn_cast<CompositeType>(eltTy))
+      elementType = compTy->getTypeAtIndex(index);
+    GBE_ASSERT(elementType);
+    return elementType;
+  }
+
+  int32_t getGEPConstOffset(const ir::Unit &unit, Type *eltTy, int32_t TypeIndex) {
     int32_t offset = 0;
-    SequentialType * seqType = dyn_cast<SequentialType>(CompTy);
-    if (seqType != NULL) {
+    if (!eltTy->isStructTy()) {
       if (TypeIndex != 0) {
-        Type *elementType = seqType->getElementType();
+        Type *elementType = getEltType(eltTy);
         uint32_t elementSize = getTypeByteSize(unit, elementType);
         uint32_t align = getAlignmentByte(unit, elementType);
         elementSize += getPadding(elementSize, align);
@@ -193,17 +204,16 @@ namespace gbe
       }
     } else {
       int32_t step = TypeIndex > 0 ? 1 : -1;
-      GBE_ASSERT(CompTy->isStructTy());
       for(int32_t ty_i=0; ty_i != TypeIndex; ty_i += step)
       {
-        Type* elementType = CompTy->getTypeAtIndex(ty_i);
+        Type* elementType = getEltType(eltTy, ty_i);
         uint32_t align = getAlignmentByte(unit, elementType);
         offset += getPadding(offset, align * step);
         offset += getTypeByteSize(unit, elementType) * step;
       }
 
       //add getPaddingding for accessed type
-      const uint32_t align = getAlignmentByte(unit, CompTy->getTypeAtIndex(TypeIndex));
+      const uint32_t align = getAlignmentByte(unit, getEltType(eltTy ,TypeIndex));
       offset += getPadding(offset, align * step);
     }
     return offset;
@@ -247,8 +257,8 @@ namespace gbe
   {
     const uint32_t ptrSize = unit.getPointerSize();
     Value* parentPointer = GEPInst->getOperand(0);
-    CompositeType* CompTy = parentPointer ? cast<CompositeType>(parentPointer->getType()) : NULL;
-    if(!CompTy)
+    Type* eltTy = parentPointer ? parentPointer->getType() : NULL;
+    if(!eltTy)
       return false;
 
     Value* currentAddrInst = 
@@ -262,14 +272,15 @@ namespace gbe
       ConstantInt* ConstOP = dyn_cast<ConstantInt>(GEPInst->getOperand(op));
       if (ConstOP != NULL) {
         TypeIndex = ConstOP->getZExtValue();
-        constantOffset += getGEPConstOffset(unit, CompTy, TypeIndex);
+        constantOffset += getGEPConstOffset(unit, eltTy, TypeIndex);
       }
       else {
         // we only have array/vectors here, 
         // therefore all elements have the same size
         TypeIndex = 0;
 
-        Type* elementType = CompTy->getTypeAtIndex(TypeIndex);
+        Type* elementType = getEltType(eltTy);
+
         uint32_t size = getTypeByteSize(unit, elementType);
 
         //add padding
@@ -326,7 +337,7 @@ namespace gbe
       }
 
       //step down in type hirachy
-      CompTy = dyn_cast<CompositeType>(CompTy->getTypeAtIndex(TypeIndex));
+      eltTy = getEltType(eltTy, TypeIndex);
     }
 
     //insert addition of new offset before GEPInst when it is not zero
-- 
2.7.4

_______________________________________________
Beignet mailing list
Beignet@lists.freedesktop.org
https://lists.freedesktop.org/mailman/listinfo/beignet

